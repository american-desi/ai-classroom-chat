name: Deploy AI Classroom Chat

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  install-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        id: frontend-cache
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}

      - name: Cache backend dependencies
        uses: actions/cache@v3
        id: backend-cache
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}

      - name: Install frontend dependencies
        if: steps.frontend-cache.outputs.cache-hit != 'true'
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        if: steps.backend-cache.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: npm ci

      - name: Run frontend lint
        working-directory: ./frontend
        run: npm run lint

      - name: Run backend lint
        working-directory: ./backend
        run: npm run lint

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Run backend tests
        working-directory: ./backend
        run: npm test
        env:
          CI: true
          NODE_ENV: test
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  deploy-backend:
    needs: install-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build backend
        working-directory: ./backend
        run: npm run build
        env:
          NODE_ENV: production
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_BACKEND_APP }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "backend"
          procfile: "web: npm start"
          healthcheck: "${{ secrets.NEXT_PUBLIC_API_URL }}/health"
          rollbackonhealthcheckfailed: true
        env:
          HD_MONGODB_URI: ${{ secrets.MONGODB_URI }}
          HD_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          HD_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HD_NODE_ENV: "production"

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NODE_ENV: production
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'